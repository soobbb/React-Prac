{"ast":null,"code":"var _jsxFileName = \"/Users/jeonsubin/Reactprac/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport DiaryEditor from './DiaryEditor';\nimport DiaryList from './DiaryList.js';\nimport React, { useState, useRef } from 'react';\n\n// const dummylist = [\n//   {\n//     id: 1,\n//     author: \"전수빈\",\n//     content: \"hi 1\",\n//     emotion:2,\n//     created_date: new Date().getTime(),\n//   },\n//   {\n//     id: 2,\n//     author: \"soob\",\n//     content: \"hi 12\",\n//     emotion:3,\n//     created_date: new Date().getTime(),\n//   },\n//   {\n//     id: 3,\n//     author: \"dda\",\n//     content: \"hi 11\",\n//     emotion:4,\n//     created_date: new Date().getTime(),\n//   },\n//   {\n//     id: 4,\n//     author: \"bin\",\n//     content: \"hi 15\",\n//     emotion:5,\n//     created_date: new Date().getTime(),\n//   },\n// ];\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [data, setData] = useState([]);\n  const dataId = useRef(0);\n  const getData = async () => {\n    const res = await fetch(\"https://jsonplaceholder.typicode.com/comments\").then(res => res.json());\n    const initData = res.slice(0, 20).map(it => {\n      return {\n        author: it.email,\n        content: it.body,\n        emotion: Math.floor(Math.random() * 5) + 1,\n        create_date: new Date().getTime(),\n        id: dataId.current++\n      };\n    });\n    setData(initData);\n  };\n  const onCreate = (author, content, emotion) => {\n    const created_date = new Date().getTime();\n    const newItem = {\n      author,\n      content,\n      emotion,\n      created_date,\n      id: dataId.current\n    };\n    dataId.current += 1;\n    setData([newItem, ...data]);\n  };\n  const onRemove = targetId => {\n    console.log(`${targetId}가 삭제되었읍니다.`);\n    const newDiaryList = data.filter(it => it.id !== targetId); //useState의 data로 갔다가  return delete값으로 다시감\n    setData(newDiaryList);\n  };\n\n  // 수정하는 데이터\n  const onEdit = (targetId, newContent) => {\n    setData(data.map(it => it.id === targetId ? {\n      ...it,\n      content: newContent\n    } : it // 수정 대상이면 컨텐츠 교체 아니라면 원래 데이터 다시 리턴\n    ));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(DiaryEditor, {\n      onCreate: onCreate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DiaryList, {\n      onEdit: onEdit,\n      tonRemove: onRemove,\n      diaryList: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"PSh4R9M9XXzghkCT8iIKMDh9kfM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["DiaryEditor","DiaryList","React","useState","useRef","App","data","setData","dataId","getData","res","fetch","then","json","initData","slice","map","it","author","email","content","body","emotion","Math","floor","random","create_date","Date","getTime","id","current","onCreate","created_date","newItem","onRemove","targetId","console","log","newDiaryList","filter","onEdit","newContent"],"sources":["/Users/jeonsubin/Reactprac/src/App.js"],"sourcesContent":["import './App.css';\nimport DiaryEditor from './DiaryEditor';\nimport DiaryList from './DiaryList.js';\nimport React, { useState, useRef } from 'react';\n\n\n// const dummylist = [\n//   {\n//     id: 1,\n//     author: \"전수빈\",\n//     content: \"hi 1\",\n//     emotion:2,\n//     created_date: new Date().getTime(),\n//   },\n//   {\n//     id: 2,\n//     author: \"soob\",\n//     content: \"hi 12\",\n//     emotion:3,\n//     created_date: new Date().getTime(),\n//   },\n//   {\n//     id: 3,\n//     author: \"dda\",\n//     content: \"hi 11\",\n//     emotion:4,\n//     created_date: new Date().getTime(),\n//   },\n//   {\n//     id: 4,\n//     author: \"bin\",\n//     content: \"hi 15\",\n//     emotion:5,\n//     created_date: new Date().getTime(),\n//   },\n// ];\n\nfunction App() {\n  const [data, setData] = useState([]);\n\n  const dataId = useRef(0)\n\n  const getData = async() => {\n    const res = await fetch(\"https://jsonplaceholder.typicode.com/comments\"\n    ).then((res)=>res.json());\n    \n    const initData = res.slice(0,20).map((it)=>{\n      return {\n        author : it.email,\n        content : it.body,\n        emotion : Math.floor(Math.random() * 5) +1,\n        create_date : new Date().getTime(),\n        id : dataId.current++\n      }\n    })\n\n    setData(initData);\n  }\n  \n  const onCreate = (author, content,emotion) => {\n    const created_date = new Date().getTime();\n    const newItem = {\n      author,\n      content,\n      emotion,\n      created_date,\n      id : dataId.current,\n    };\n    dataId.current += 1;\n    setData([newItem, ...data])\n  };\n\n  const onRemove = (targetId)=>{\n    console.log(`${targetId}가 삭제되었읍니다.`)\n    const newDiaryList = data.filter((it)=>it.id !== targetId);     //useState의 data로 갔다가  return delete값으로 다시감\n    setData(newDiaryList);\n  };\n\n  // 수정하는 데이터\n  const onEdit = (targetId, newContent) => {\n    setData(\n      data.map((it)=> \n      it.id === targetId ? {...it, content : newContent} : it // 수정 대상이면 컨텐츠 교체 아니라면 원래 데이터 다시 리턴\n      )\n    );\n  };\n\n  return (\n    <div className='App'>\n      <DiaryEditor onCreate={onCreate}/>\n      <DiaryList onEdit = {onEdit} tonRemove={onRemove} diaryList={data}/>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}